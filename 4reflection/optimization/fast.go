package main

import (
	"encoding/json"
	"io"
	"io/ioutil"
	"os"
	"strings"

	"strconv"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
	"github.com/mailru/easyjson"
)

type User struct {
	Browsers []string
	//Company string
	//Country string
	Email string
	//Job string
	Name string
	//Phone string
}

// вам надо написать более быструю оптимальную этой функции
func FastSearch(out io.Writer) {
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
	}

	fileContents, err := ioutil.ReadAll(file)
	if err != nil {
		panic(err)
	}

	seenBrowsers := []string{}
	uniqueBrowsers := 0

	lines := strings.Split(string(fileContents), "\n")

	users := make([]User, 0)

	out.Write([]byte("found users:\n"))

	for i, line := range lines {
		user := new(User)
		user.UnmarshalJSON([]byte(line))

		if err != nil {
			panic(err)
		}
		users = append(users, *user)

		isAndroid := false
		isMSIE := false

		browsers := user.Browsers

		for _, browserRaw := range browsers {
			browser := browserRaw

			if strings.Contains(browser, "Android") {
				isAndroid = true
				notSeenBefore := true
				for _, item := range seenBrowsers {
					if item == browser {
						notSeenBefore = false
					}
				}
				if notSeenBefore {
					// log.Printf("SLOW New browser: %s, first seen: %s", browser, user["name"])
					seenBrowsers = append(seenBrowsers, browser)
					uniqueBrowsers++
				}
			}

			browser = browserRaw

			if strings.Contains(browser, "MSIE") {
				isMSIE = true
				notSeenBefore := true
				for _, item := range seenBrowsers {
					if item == browser {
						notSeenBefore = false
					}
				}
				if notSeenBefore {
					// log.Printf("SLOW New browser: %s, first seen: %s", browser, user["name"])
					seenBrowsers = append(seenBrowsers, browser)
					uniqueBrowsers++
				}
			}
		}

		if !(isAndroid && isMSIE) {
			continue
		}

		// log.Println("Android and MSIE user:", user["name"], user["email"])
		email := strings.Replace(user.Email, "@", " [at] ", -1)

		out.Write([]byte(  "[" + strconv.Itoa(i) + "] " + user.Name + " <" + email + ">\n"  ))
	}

	//fmt.Fprintln(out, "Total unique browsers", len(seenBrowsers))
	out.Write([]byte("\nTotal unique browsers " + strconv.Itoa(len(seenBrowsers)) + "\n"))
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func EasyUnmarshal(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "browsers":
			if in.IsNull() {
				in.Skip()
				out.Browsers = nil
			} else {
				in.Delim('[')
				if out.Browsers == nil {
					if !in.IsDelim(']') {
						out.Browsers = make([]string, 0, 4)
					} else {
						out.Browsers = []string{}
					}
				} else {
					out.Browsers = (out.Browsers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Browsers = append(out.Browsers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
			//case "company":
			//	out.Company = string(in.String())
			//case "country":
			//	out.Country = string(in.String())
		case "email":
			out.Email = string(in.String())
			//case "job":
			//	out.Job = string(in.String())
		case "name":
			out.Name = string(in.String())
			//case "phone":
			//	out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson15b34522EncodeCUsersUserGoSrc(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Browsers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Browsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Browsers {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	//{
	//	const prefix string = ",\"Company\":"
	//	if first {
	//		first = false
	//		out.RawString(prefix[1:])
	//	} else {
	//		out.RawString(prefix)
	//	}
	//	out.String(string(in.Company))
	//}
	//{
	//	const prefix string = ",\"Country\":"
	//	if first {
	//		first = false
	//		out.RawString(prefix[1:])
	//	} else {
	//		out.RawString(prefix)
	//	}
	//	out.String(string(in.Country))
	//}
	{
		const prefix string = ",\"Email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	//{
	//	const prefix string = ",\"Job\":"
	//	if first {
	//		first = false
	//		out.RawString(prefix[1:])
	//	} else {
	//		out.RawString(prefix)
	//	}
	//	out.String(string(in.Job))
	//}
	{
		const prefix string = ",\"Name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	//{
	//	const prefix string = ",\"Phone\":"
	//	if first {
	//		first = false
	//		out.RawString(prefix[1:])
	//	} else {
	//		out.RawString(prefix)
	//	}
	//	out.String(string(in.Phone))
	//}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson15b34522EncodeCUsersUserGoSrc(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson15b34522EncodeCUsersUserGoSrc(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	EasyUnmarshal(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	EasyUnmarshal(l, v)
}

//      go test -bench . -benchmem -cpuprofile=cpu.out -memprofile=mem.out

//      go tool pprof main.test cpu.out
//      go tool pprof main.test.exe mem.out

//      go tool pprof -http :8080  -alloc_objects optimization.test.exe mem.out
